---
name: Lint, Build, and Test Docker Image

on:  # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the "main" branch
  workflow_call:  # Allow this workflow to be called by other workflows
    inputs:
      run_check_version:
        description: "Run the check-version job"
        default: "true"
        required: false
        type: string

env:
  UV_VERSION: "0.6.5"  # Global variable for UV version

jobs:
  # Run code quality checks
  code-checks:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest

    steps:
      # Check out the code repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Install uv
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          # Install a specific version of uv.
          version: ${{ env.UV_VERSION }}

      # Install dependencies (including Python)
      - name: Install the project
        run: uv sync --frozen --no-group test

      # Install trivy
      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@v0.2.0

      # Run checks
      - name: Run the suite of checks
        run: make check

      # Verify that uv.lock is up to date
      - name: Verify uv.lock file
        run: |
          # Check for changes in the lock file
          source scripts/logger.sh
          if [[ $(git status --porcelain uv.lock) ]]; then
            error "::error::uv.lock file is not up to date. Run 'uv sync' and commit the changes."
            exit 1
          else
            success "uv.lock file is up to date."
          fi

  # Make sure the version in pyproject.toml has been incremented
  check-version:
    name: Check Project Version
    runs-on: ubuntu-latest
    if: ${{ inputs.run_check_version == 'true' || inputs.run_check_version == null }}

    steps:
      - name: Debug Inputs
        run: |
          echo "The value of the input 'run_check_version': ${{ inputs.run_check_version }}"
          echo "Other inputs or environment variables can be inspected here."

      # Check out the pull request code
      - name: Checkout the PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      # Get the version from pyproject.toml on the pull request branch
      - name: Get version from PR branch
        id: pr_version
        run: |
          # Set pr_version
          source scripts/logger.sh
          PR_VERSION=$(python3 -c "import tomllib; \
            print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "pr_version=$PR_VERSION" >> $GITHUB_ENV
          info "pr_version = $PR_VERSION"

      # Fetch the main branch
      - name: Fetch main branch
        run: |
          git fetch origin main:main

      # Get the version from pyproject.toml on the main branch
      - name: Get version from main branch
        id: main_version
        run: |
          # Set main_version
          source scripts/logger.sh
          MAIN_VERSION=$(git show main:pyproject.toml | python3 -c "import tomllib, sys; \
            print(tomllib.load(sys.stdin.buffer)['project']['version'])")
          echo "main_version=$MAIN_VERSION" >> $GITHUB_ENV
          info "main_version = $MAIN_VERSION"

      # Compare versions
      - name: Compare versions
        run: |
          # Compare pr_version and main_version
          source scripts/logger.sh
          if [ "${{ env.pr_version }}" == "${{ env.main_version }}" ]; then
            error "::error::Version in pyproject.toml (${{ env.pr_version }}) matches version in main \
          (${{ env.main_version }})."
            error "::error::Increment the version, run 'uv sync', and commit the changes."
            exit 1
          else
           success "Version in pyproject.toml has been updated (PR: ${{ env.pr_version }}, \
          Main: ${{ env.main_version }})."
          fi

  # Run unit tests inside a representative Docker image
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      # Check out the code repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up any needed environment variables
      - name: Set Env Vars
        run: |
          echo "Set up env vars"
          IMAGE_NAME="localhost:5000/${{ github.repository_owner }}/${{ github.event.repository.name }}_test"
          echo "image=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "tag=test" >> $GITHUB_ENV

      # Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      # Build the test Docker image (push to local registry)
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile-test
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.image }}:${{ env.tag }}

      # Run tests inside the test Docker image
      - name: Run Tests in Docker Container
        run: |
          echo "Running unit tests..."
          make test-docker IMAGE=${{ env.image }} TAG=${{ env.tag }}

  # Make sure the container builds and passes vuln scan
  docker-build-scan:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      # Check out the code repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up any needed environment variables
      - name: Set Env Vars
        run: |
          echo "Set up env vars"
          IMAGE_NAME="localhost:5000/${{ github.repository_owner }}/${{ github.event.repository.name }}"
          echo "image=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "tag=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      # Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      # Build the Docker image (push to local registry)
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.image }}:${{ env.tag }}

      # Install trivy
      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@v0.2.0

      # Run vuln scans on the Docker image
      - name: Scan Docker image
        run: |
          echo "Scanning image..."
          make scan IMAGE=${{ env.image }} TAG=${{ env.tag }} SCANNER=trivy
